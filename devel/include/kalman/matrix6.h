// Generated by gencpp from file kalman/matrix6.msg
// DO NOT EDIT!


#ifndef KALMAN_MESSAGE_MATRIX6_H
#define KALMAN_MESSAGE_MATRIX6_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <kalman/vector9.h>
#include <kalman/vector9.h>
#include <kalman/vector9.h>
#include <kalman/vector9.h>
#include <kalman/vector9.h>
#include <kalman/vector9.h>

namespace kalman
{
template <class ContainerAllocator>
struct matrix6_
{
  typedef matrix6_<ContainerAllocator> Type;

  matrix6_()
    : header()
    , r1()
    , r2()
    , r3()
    , r4()
    , r5()
    , r6()  {
    }
  matrix6_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , r1(_alloc)
    , r2(_alloc)
    , r3(_alloc)
    , r4(_alloc)
    , r5(_alloc)
    , r6(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::kalman::vector9_<ContainerAllocator>  _r1_type;
  _r1_type r1;

   typedef  ::kalman::vector9_<ContainerAllocator>  _r2_type;
  _r2_type r2;

   typedef  ::kalman::vector9_<ContainerAllocator>  _r3_type;
  _r3_type r3;

   typedef  ::kalman::vector9_<ContainerAllocator>  _r4_type;
  _r4_type r4;

   typedef  ::kalman::vector9_<ContainerAllocator>  _r5_type;
  _r5_type r5;

   typedef  ::kalman::vector9_<ContainerAllocator>  _r6_type;
  _r6_type r6;





  typedef boost::shared_ptr< ::kalman::matrix6_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kalman::matrix6_<ContainerAllocator> const> ConstPtr;

}; // struct matrix6_

typedef ::kalman::matrix6_<std::allocator<void> > matrix6;

typedef boost::shared_ptr< ::kalman::matrix6 > matrix6Ptr;
typedef boost::shared_ptr< ::kalman::matrix6 const> matrix6ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kalman::matrix6_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kalman::matrix6_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kalman

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'kalman': ['/home/rajat/rajat_ws/src/kalman/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kalman::matrix6_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kalman::matrix6_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kalman::matrix6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kalman::matrix6_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kalman::matrix6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kalman::matrix6_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kalman::matrix6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "699fb7d217df09274ee066bff5a81e6d";
  }

  static const char* value(const ::kalman::matrix6_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x699fb7d217df0927ULL;
  static const uint64_t static_value2 = 0x4ee066bff5a81e6dULL;
};

template<class ContainerAllocator>
struct DataType< ::kalman::matrix6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kalman/matrix6";
  }

  static const char* value(const ::kalman::matrix6_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kalman::matrix6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
vector9 r1\n\
vector9 r2\n\
vector9 r3\n\
vector9 r4\n\
vector9 r5\n\
vector9 r6\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: kalman/vector9\n\
float64 m1\n\
float64 m2\n\
float64 m3\n\
float64 m4\n\
float64 m5\n\
float64 m6\n\
float64 m7\n\
float64 m8\n\
float64 m9\n\
";
  }

  static const char* value(const ::kalman::matrix6_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kalman::matrix6_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.r1);
      stream.next(m.r2);
      stream.next(m.r3);
      stream.next(m.r4);
      stream.next(m.r5);
      stream.next(m.r6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct matrix6_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kalman::matrix6_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kalman::matrix6_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "r1: ";
    s << std::endl;
    Printer< ::kalman::vector9_<ContainerAllocator> >::stream(s, indent + "  ", v.r1);
    s << indent << "r2: ";
    s << std::endl;
    Printer< ::kalman::vector9_<ContainerAllocator> >::stream(s, indent + "  ", v.r2);
    s << indent << "r3: ";
    s << std::endl;
    Printer< ::kalman::vector9_<ContainerAllocator> >::stream(s, indent + "  ", v.r3);
    s << indent << "r4: ";
    s << std::endl;
    Printer< ::kalman::vector9_<ContainerAllocator> >::stream(s, indent + "  ", v.r4);
    s << indent << "r5: ";
    s << std::endl;
    Printer< ::kalman::vector9_<ContainerAllocator> >::stream(s, indent + "  ", v.r5);
    s << indent << "r6: ";
    s << std::endl;
    Printer< ::kalman::vector9_<ContainerAllocator> >::stream(s, indent + "  ", v.r6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KALMAN_MESSAGE_MATRIX6_H
